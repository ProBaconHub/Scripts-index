if REJOINTYPE = "ReServer" then
	local TPService = game:GetService("TeleportService")
	local LocalPlayer = game:GetService("Players").LocalPlayer
	TPService:Teleport(game.PlaceId, LocalPlayer)
elseif REJOINTYPE = "LowServer" then
	local Http = game:GetService("HttpService")
	local TPService = game:GetService("TeleportService")
	local Api = "https://games.roblox.com/v1/games/"
	local _place = game.PlaceId
	local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
	function ListServers(cursor)
	    local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
	    return Http:JSONDecode(Raw)
	end
	local Server, Next; repeat
	    local Servers = ListServers(Next)
	    Server = Servers.data[1]
	    Next = Servers.nextPageCursor
	until Server
	TPService:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
elseif REJOINTYPE = "HopServer" then
	local Player = game.Players.LocalPlayer    
	local Http = game:GetService("HttpService")
	local TPService = game:GetService("TeleportService")
	local Api = "https://games.roblox.com/v1/games/"
	local _place,_id = game.PlaceId, game.JobId
	local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
	function ListServers(cursor)
       local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
       return Http:JSONDecode(Raw)
    end
    local Next; repeat
	    local Servers = ListServers(Next)
		for i,v in next, Servers.data do
			if v.playing < v.maxPlayers and v.id ~= _id then
				local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
				if s then break end
			end
		end
		Next = Servers.nextPageCursor
	until not Next
else
	error("Wrong REJOINTYPE")
end
